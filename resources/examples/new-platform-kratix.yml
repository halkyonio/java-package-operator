apiVersion: halkyon.io/v1alpha1
kind: Platform
metadata:
  name: kratix
  namespace: platform
spec:
  version: 0.1.0
  description: "A platform installing kratix and its dependencies: ingress, cert manager, gitea & argocd"
  packages:
    - name: nginx-ingress
      description: "nginx-ingress package"
      pipeline:
        steps:
          - name: install
            image: dtzar/helm-kubectl
            helm:
              chart:
                repoUrl: https://kubernetes.github.io/ingress-nginx
                name: ingress-nginx
                version: 4.12.2
              values: |
                controller:
                  hostPort:
                    enabled: true
                  service:
                    type: NodePort
                ingress:
                  enabled: true

          - name: post-install
            image: dtzar/helm-kubectl
            condition:
              endpoint: nginx-ingress-ingress-nginx-controller-admission.ingress.svc.cluster.local:443
              path: /healthz

    - name: gitea
      description: "gitea package"
      pipeline:
        steps:
          - name: init
            image: dtzar/helm-kubectl
            condition:
              endpoint: nginx-ingress-ingress-nginx-controller-admission.ingress.svc.cluster.local:443
              path: /healthz

          - name: install
            image: dtzar/helm-kubectl
            helm:
              chart:
                repoUrl: https://dl.gitea.com/charts/
                name: gitea
              values:
                redis-cluster:
                  enabled: false
                postgresql:
                  enabled: false
                postgresql-ha:
                  enabled: false
                valkey-cluster:
                  enabled: false
                persistence:
                  enabled: false
                gitea:
                  admin:
                    # existingSecret: <NAME_OF_SECRET>
                    username: "giteaAdmin"
                    password: "developer"
                    email: "gi@tea.com"
                  config:
                    database:
                      DB_TYPE: sqlite3
                    session:
                      PROVIDER: memory
                    cache:
                      ADAPTER: memory
                    queue:
                      TYPE: level
                service:
                  ssh:
                    type: NodePort
                    nodePort: 32222
                    externalTrafficPolicy: Local
                ingress:
                  enabled: true
                  className: nginx
                  hosts:
                    - host: gitea.localtest.me
                      paths:
                        - path: /
                          pathType: Prefix

    - name: cert-manager
      description: "cert-manager package"
      pipeline:
        steps:
          - name: install
            image: dtzar/helm-kubectl
            file:
              url: https://github.com/cert-manager/cert-manager/releases/download/v1.17.2/cert-manager.yaml

    - name: kratix
      description: "kratix package"
      pipeline:
        steps:
          - name: init
            image: dtzar/helm-kubectl
            condition:
              endpoint: http://cert-manager-webhook.cert-manager.svc.cluster.local:443
              path: /healthz
          - name: install
            image: dtzar/helm-kubectl
            file:
              url: https://github.com/syntasso/kratix/releases/latest/download/kratix.yaml

    - name: argocd
      description: "argocd package"
      pipeline:
        steps:
          - name: install
            image: dtzar/helm-kubectl
            helm:
              chart:
                repoUrl: https://argoproj.github.io/argo-helm
                repoName: argo-cd
                name: argocd
            values: |
              configs:
               secret:
                 argocdServerAdminPassword: $2a$10$lsTGT/O94tQBTs4gdtQmBuQ3R3jgfSizvPSzl6ySt2cn6OktKVwAy
              global:
                domain: argocd.localtest.me
              certificate:
                enabled: true
              server:
                ingress:
                  enabled: true
                  ingressClassName: nginx
                  annotations:
                    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
                    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
                    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
                  tls: true